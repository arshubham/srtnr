// This file was generated by gir (d933f9a) from gir-files (469db10)
// DO NOT EDIT

use Bin;
use Buildable;
use Container;
use Stack;
use Widget;
use ffi;
use glib;
use glib::Value;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::SignalHandlerId;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct StackSidebar(Object<ffi::GtkStackSidebar, ffi::GtkStackSidebarClass>): Bin, Container, Widget, Buildable;

    match fn {
        get_type => || ffi::gtk_stack_sidebar_get_type(),
    }
}

impl StackSidebar {
    #[cfg(any(feature = "v3_16", feature = "dox"))]
    pub fn new() -> StackSidebar {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_stack_sidebar_new()).downcast_unchecked()
        }
    }
}

#[cfg(any(feature = "v3_16", feature = "dox"))]
impl Default for StackSidebar {
    fn default() -> Self {
        Self::new()
    }
}

pub trait StackSidebarExt {
    #[cfg(any(feature = "v3_16", feature = "dox"))]
    fn get_stack(&self) -> Option<Stack>;

    #[cfg(any(feature = "v3_16", feature = "dox"))]
    fn set_stack(&self, stack: &Stack);

    fn get_property_stack(&self) -> Option<Stack>;

    fn set_property_stack(&self, stack: Option<&Stack>);

    fn connect_property_stack_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<StackSidebar> + IsA<glib::object::Object>> StackSidebarExt for O {
    #[cfg(any(feature = "v3_16", feature = "dox"))]
    fn get_stack(&self) -> Option<Stack> {
        unsafe {
            from_glib_none(ffi::gtk_stack_sidebar_get_stack(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v3_16", feature = "dox"))]
    fn set_stack(&self, stack: &Stack) {
        unsafe {
            ffi::gtk_stack_sidebar_set_stack(self.to_glib_none().0, stack.to_glib_none().0);
        }
    }

    fn get_property_stack(&self) -> Option<Stack> {
        let mut value = Value::from(None::<&Stack>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "stack".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    fn set_property_stack(&self, stack: Option<&Stack>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "stack".to_glib_none().0, Value::from(stack).to_glib_none().0);
        }
    }

    fn connect_property_stack_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::stack",
                transmute(notify_stack_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_stack_trampoline<P>(this: *mut ffi::GtkStackSidebar, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<StackSidebar> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&StackSidebar::from_glib_borrow(this).downcast_unchecked())
}
